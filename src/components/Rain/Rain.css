
/* Notes
  Figure out how to change angle of the droplet so then can fall diagonally. rotate: 30deg changes angle of droplet
  but does not change what direction they fall. It just falls straight down. 
*/

.drop-container{
  position: absolute;
  bottom: 100%;
  width: 15px;
  height: 120px;
  pointer-events: none;
  animation: fall 0.5s linear infinite;

    /* Preset values for the drop speed (seconds) should be provided; slow = 2s default = .73 fast = .40s */
    -webkit-animation: fall .5s linear infinite;
    -moz-animation: fall .5s linear infinite;
    
    /* 
    ~ Can be used to individually change duration while keeping others static
      animation-duration: .73s;
      
    ~ Can be used to delay the animation using a positive value for #s (seconds). Not useful unless there is a specific 
    reason to delay only the inital start of animation. If a negative value is provided then it will act as if the animation
    has been playing for x seconds.
     

    ~ Can be used to set how many times the animation should run. Useful just to simply stop animation after specified amount 
      of times or used in other transitions. Inifinte value would just continute to play animation forever.   
      animation-iteration-count: 3;

    ~
      */
      
      /* animation-delay: -3s; */
}

  /* KEYFRAMES from droplet animation
     requires to but not from as it will take existing values and gradually change to the 'to' values

  */
  @keyframes fall {
    /* margin-top is used here because individual position is not known, and to pass on relative to current one
       would probably hinder performance/memory.
       To have droplets reach the bottom of element no matter what, i guess height 0 could be used with no
       issues besides having to account for the speed based on vertical position
    */

    0% {
      transform: translateY(0vh);
    }
    /* transform: translateY(xvh) - positions the element as if the vh has been shifted vertically
       according to the value provided. Here, the entire droplet position is being shifted downward by 90vh. 
       Calculating the pixels by height of parent element plus 120 to compensate for height of the droplet
       Changing the values below determines when the entire droplet stops and triggers the droplet-impact animation 
    */
    75% {
      transform: translateY(725px);
     
    }

    100% {
      transform: translateY(770px);

    }

  }
/*  This can be used to have all the colors be the same and change to different ones during the lifespan of the 
    fall
  @keyframes fall {
    0%   {background-color: red;}
    25%  {background-color: yellow;}
    50%  {background-color: blue;}
    100% {background-color: green;}
     to {
      margin-top:1100px;
    }
  } */




.droplet {
  /* Constants */
  position: absolute;
  /* margin-left: 7px; */
  /* Customizable */
    /* background = color of each droplet; Look into webkit/moz 
       potentially a rainbow rain effect can be achieved by assign each droplet a different color for a set of 
       colors that complement each other.
       Background transparency adds an effect that makes the rain lighter than 1px and seem more far away
    */
    /* background:-webkit-gradient(linear,0% 0%,0% 100%, from(rgba(13,52,58,1) ), to(rgba(255,255,255,0.5))  );
    background: -moz-linear-gradient(top, rgba(13,52,58,1) 0%, rgba(255,255,255,.5) 100%); */
    /* background-color: rgb(183, 212, 255); */
    background: linear-gradient(to bottom, rgba(255, 255, 255, 0), rgba(255, 255, 255, 0.25));

    /* Width and height should have a max value as they cease to look like droplets after a certain point */
    width: 1px;
    height: 60%;
    margin-left: 7px;    

    -webkit-animation: droplet .5s linear infinite;
    -moz-animation: droplet .5s linear infinite;
  }
  @keyframes droplet {
    0% {
      opacity: 1;
    }
    65% {
      opacity: 1;
    }
    75% {
      opacity: 0;
    }
    100% {
      opacity: 0;
    }
  }

  /* drop animation styles */
  /* @-webkit-keyframes fall {
      to {margin-top:100px;}
  }
  @-moz-keyframes fall {
      to {margin-top:900px;}
  } */
  
  



.droplet-impact{
  width: 15px;
  height: 10px;
  border-top: 2px dotted rgb(255, 255, 255);
  border-radius: 50%;
  opacity: 1;
  transform: scale(0);
  animation: droplet-impact 0.5s linear infinite;
  /* Toggle display to remove effect */
  display: block;
}

@keyframes droplet-impact {
  0% {
    opacity: 1;
    transform: scale(0);
  }
  80% {
    opacity: 1;
    transform: scale(0);
  }
  90% {
    opacity: 0.5;
    transform: scale(1);
  }
  100% {
    opacity: 0;
    transform: scale(1.5);
  }
}







  /* This is the container where the droplets live. It requires a parent element so this can inherit the height and width values
     so h/w should never be customized here.
     There may be reason for the user to want to customized h/w but they should just wrap a container around this and change it there
  */
  #Rain {
    /* Constants */
    position: absolute;
    display: flex;
    /* overflow-y: hidden;
    overflow-x: hidden; */
    border-radius: inherit;
    width: 100%;
    height: 100%;
    
    

    /* Customizable */
    z-index: 10;

  }



  



  body {
    margin: 0;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
      sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    background-color: rgb(37, 37, 37);
  
  }
  

  

  